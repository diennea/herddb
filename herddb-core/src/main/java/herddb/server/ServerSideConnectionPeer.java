/*
 Licensed to Diennea S.r.l. under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Diennea S.r.l. licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

 */
package herddb.server;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import herddb.backup.DumpedLogEntry;
import herddb.codec.RecordSerializer;
import herddb.core.HerdDBInternalException;
import herddb.core.TableManager;
import herddb.core.stats.ConnectionsInfo;
import herddb.log.LogSequenceNumber;
import herddb.model.DDLStatementExecutionResult;
import herddb.model.DMLStatementExecutionResult;
import herddb.model.DataScanner;
import herddb.model.DataScannerException;
import herddb.model.DuplicatePrimaryKeyException;
import herddb.model.GetResult;
import herddb.model.Index;
import herddb.model.NotLeaderException;
import herddb.model.Record;
import herddb.model.ScanResult;
import herddb.model.Statement;
import herddb.model.StatementEvaluationContext;
import herddb.model.StatementExecutionException;
import herddb.model.StatementExecutionResult;
import herddb.model.Table;
import herddb.model.TableAwareStatement;
import herddb.model.Transaction;
import herddb.model.TransactionContext;
import herddb.model.TransactionResult;
import herddb.model.commands.BeginTransactionStatement;
import herddb.model.commands.CommitTransactionStatement;
import herddb.model.commands.RollbackTransactionStatement;
import herddb.model.commands.SQLPlannedOperationStatement;
import herddb.model.commands.ScanStatement;
import herddb.network.Channel;
import herddb.network.ChannelEventListener;
import herddb.network.KeyValue;
import herddb.network.Message;
import herddb.network.ServerSideConnection;
import herddb.security.sasl.SaslNettyServer;
import herddb.sql.TranslatedQuery;
import herddb.utils.Bytes;
import herddb.utils.DataAccessor;
import herddb.utils.RawString;
import herddb.utils.TuplesList;

/**
 * Handles a client Connection
 *
 * @author enrico.olivelli
 */
public class ServerSideConnectionPeer implements ServerSideConnection, ChannelEventListener {

    private static final Logger LOGGER = Logger.getLogger(ServerSideConnectionPeer.class.getName());
    private static final AtomicLong IDGENERATOR = new AtomicLong();
    private final long id = IDGENERATOR.incrementAndGet();
    private final Channel channel;
    private final Server server;
    /**
     * Open scanners. The ID is generated by the client
     */
    private final ConcurrentMap<RawString, ServerSideScannerPeer> scanners = new ConcurrentHashMap<>();
    private final ConcurrentMap<RawString, Set<Long>> openTransactions = new ConcurrentHashMap<>();
    private volatile boolean authenticated;
    private volatile SaslNettyServer saslNettyServer;
    private final String address;
    private volatile String username = "";
    private final long connectionTs = System.currentTimeMillis();

    public ServerSideConnectionPeer(Channel channel, Server server) {
        this.channel = channel;
        this.channel.setMessagesReceiver(this);
        this.server = server;
        this.address = channel.getRemoteAddress();
    }

    @Override
    public long getConnectionId() {
        return id;
    }

    @Override
    public void messageReceived(Message message, Channel _channel) {
        LOGGER.log(Level.FINEST, "messageReceived {0}", message);

        switch (message.type) {
            case Message.TYPE_SASL_TOKEN_MESSAGE_REQUEST: {
                handleSaslTokenMessageRequest(message, _channel);
                break;
            }
            case Message.TYPE_SASL_TOKEN_MESSAGE_TOKEN: {
                handleSaslTokenMessage(_channel, message);
                break;
            }
            case Message.TYPE_EXECUTE_STATEMENT: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleExecuteStatement(message, _channel);
            }
            break;
            case Message.TYPE_TX_COMMAND: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleTxCommand(message, _channel);
            }
            break;
            case Message.TYPE_EXECUTE_STATEMENTS: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleExecuteStatements(message, _channel);
            }
            break;
            case Message.TYPE_REQUEST_TABLESPACE_DUMP: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleRequestTablespaceDump(message, _channel);
            }
            break;
            case Message.TYPE_REQUEST_TABLE_RESTORE: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleRequestTableRestore(message, _channel);
            }
            break;
            case Message.TYPE_PUSH_TABLE_DATA: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handlePushTableData(message, _channel);
            }
            break;
            case Message.TYPE_TABLE_RESTORE_FINISHED: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleTableRestoreFinished(message, _channel);
            }
            break;
            case Message.TYPE_RESTORE_FINISHED: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleRestoreFinished(message, _channel);
            }
            break;
            case Message.TYPE_PUSH_TXLOGCHUNK: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handlePushTxLogChunk(message, _channel);
            }
            break;
            case Message.TYPE_PUSH_TRANSACTIONSBLOCK: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handlePushTransactionsBlock(message, _channel);
            }
            break;
            case Message.TYPE_OPENSCANNER: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleOpenScanner(message, _channel);
                break;
            }

            case Message.TYPE_FETCHSCANNERDATA: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleFetchScannerData(message, _channel);
            }
            break;

            case Message.TYPE_CLOSESCANNER: {
                if (!authenticated) {
                    sendAuthRequiredError(_channel, message);
                    break;
                }
                handleCloseScanner(message, _channel);
            }
            break;

            default:
                _channel.sendReplyMessage(message, Message.ERROR(new Exception("unsupported message type " + message.type)));
        }
    }

    private void handleRequestTableRestore(Message message, Channel _channel) {
        try {
            RawString tableSpace = (RawString) message.parameters.get("tableSpace");
            byte[] table = (byte[]) message.parameters.get("table");
            long dumpLedgerId = (long) message.parameters.get("dumpLedgerId");
            long dumpOffset = (long) message.parameters.get("dumpOffset");
            Table tableSchema = Table.deserialize(table);
            tableSchema = Table
                    .builder()
                    .cloning(tableSchema)
                    .tablespace(tableSpace.toString())
                    .build();
            server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .beginRestoreTable(tableSchema.serialize(), new LogSequenceNumber(dumpLedgerId, dumpOffset));

            _channel.sendReplyMessage(message, Message.ACK());
        } catch (StatementExecutionException err) {
            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handleTableRestoreFinished(Message message, Channel _channel) {
        try {
            RawString tableSpace = (RawString) message.parameters.get("tableSpace");
            RawString table = (RawString) message.parameters.get("table");

            List<byte[]> indexesDef = (List<byte[]>) message.parameters.get("indexes");
            List<Index> indexes = indexesDef.stream().map(Index::deserialize).collect(Collectors.toList());

            server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .restoreTableFinished(table.toString(), indexes);

            _channel.sendReplyMessage(message, Message.ACK());
        } catch (StatementExecutionException err) {
            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handleRestoreFinished(Message message, Channel _channel) {
        try {
            RawString tableSpace = (RawString) message.parameters.get("tableSpace");

            server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .restoreFinished();

            _channel.sendReplyMessage(message, Message.ACK());
        } catch (StatementExecutionException err) {
            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handlePushTableData(Message message, Channel _channel) {
        try {
            RawString tableSpace = (RawString) message.parameters.get("tableSpace");
            RawString table = (RawString) message.parameters.get("table");
            List<KeyValue> data = (List<KeyValue>) message.parameters.get("data");
            LOGGER.log(Level.INFO, "Received {0} records for restore of table {1} in tableSpace {2}", new Object[]{data.size(), table, tableSpace});
            long _start = System.currentTimeMillis();
            List<Record> records = new ArrayList<>(data.size());
            for (KeyValue kv : data) {
                records.add(new Record(Bytes.from_array(kv.key), Bytes.from_array(kv.value)));
            }
            TableManager tableManager = (TableManager) server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .getTableManager(table.toString());
            tableManager.writeFromDump(records);
            long _stop = System.currentTimeMillis();
            LOGGER.log(Level.INFO, "Time restore {0} records: data {1} ms", new Object[]{data.size(), _stop - _start});
            _channel.sendReplyMessage(message, Message.ACK());
        } catch (StatementExecutionException err) {
            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handlePushTxLogChunk(Message message, Channel _channel) {
        try {
            RawString tableSpace = (RawString) message.parameters.get("tableSpace");
            List<KeyValue> data = (List<KeyValue>) message.parameters.get("data");
            LOGGER.log(Level.INFO, "Received {0} records for restore of txlog in tableSpace {1}", new Object[]{data.size(), tableSpace});

            List<DumpedLogEntry> entries = new ArrayList<>(data.size());
            for (KeyValue kv : data) {
                entries.add(new DumpedLogEntry(LogSequenceNumber.deserialize(kv.key), kv.value));

            }
            server.getManager().getTableSpaceManager(tableSpace.toString())
                    .restoreRawDumpedEntryLogs(entries);

            _channel.sendReplyMessage(message, Message.ACK());
        } catch (Exception err) {
            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handlePushTransactionsBlock(Message message, Channel _channel) {
        try {
            RawString tableSpace = (RawString) message.parameters.get("tableSpace");
            List<byte[]> data = (List<byte[]>) message.parameters.get("data");
            LOGGER.log(Level.INFO, "Received " + data.size() + " records for restore of transactions in tableSpace " + tableSpace);

            String _tableSpace = tableSpace.toString();
            List<Transaction> entries = new ArrayList<>(data.size());
            for (byte[] serializedTx : data) {
                entries.add(Transaction.deserialize(_tableSpace, serializedTx));
            }
            server.getManager().getTableSpaceManager(_tableSpace).restoreRawDumpedTransactions(entries);

            _channel.sendReplyMessage(message, Message.ACK());
        } catch (Exception err) {
            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handleOpenScanner(Message message, Channel _channel) {
        RawString tableSpace = (RawString) message.parameters.get("tableSpace");
        Long tx = (Long) message.parameters.get("tx");
        long txId = tx != null ? tx : 0;
        RawString query = (RawString) message.parameters.get("query");
        RawString scannerId = (RawString) message.parameters.get("scannerId");
        int fetchSize = 10;
        if (message.parameters.containsKey("fetchSize")) {
            fetchSize = (Integer) message.parameters.get("fetchSize");
        }
        int maxRows = 0;
        if (message.parameters.containsKey("maxRows")) {
            maxRows = (Integer) message.parameters.get("maxRows");
        }
        List<Object> parameters = (List<Object>) message.parameters.get("params");
        if (LOGGER.isLoggable(Level.FINEST)) {
            LOGGER.log(Level.FINEST, "openScanner txId+" + txId + ", fetchSize " + fetchSize + ", maxRows " + maxRows + "," + query + " with " + parameters);
        }
        try {
            TranslatedQuery translatedQuery = server
                    .getManager()
                    .getPlanner().translate(tableSpace.toString()
                            , query.toString(), parameters, true, true, false, maxRows);

            if (LOGGER.isLoggable(Level.FINEST)) {
                LOGGER.log(Level.FINEST, query + " -> " + translatedQuery.plan.mainStatement);
            }

            TransactionContext transactionContext = new TransactionContext(txId);
            if (translatedQuery.plan.mainStatement instanceof SQLPlannedOperationStatement
                    || translatedQuery.plan.mainStatement instanceof ScanStatement
                    || translatedQuery.plan.joinStatements != null) {

                ScanResult scanResult = (ScanResult) server.getManager().executePlan(translatedQuery.plan, translatedQuery.context, transactionContext);
                DataScanner dataScanner = scanResult.dataScanner;

                ServerSideScannerPeer scanner = new ServerSideScannerPeer(dataScanner);

                String[] columns = dataScanner.getFieldNames();
                List<DataAccessor> records = dataScanner.consume(fetchSize);
                TuplesList tuplesList = new TuplesList(columns, records);
                boolean last = dataScanner.isFinished();
                LOGGER.log(Level.FINEST, "sending first {0} records to scanner {1} query {2}", new Object[]{records.size(), scannerId, query});
                if (!last) {
                    scanners.put(scannerId, scanner);
                }
                _channel.sendReplyMessage(message,
                        Message.RESULTSET_CHUNK(scannerId.toString(), tuplesList, last, dataScanner.transactionId));
            } else {
                _channel.sendReplyMessage(message, Message.ERROR(new Exception("unsupported query type for scan " + query + ": PLAN is " + translatedQuery.plan)));
            }
        } catch (DataScannerException | RuntimeException err) {
            LOGGER.log(Level.SEVERE, "error on scanner " + scannerId + ": " + err, err);
            scanners.remove(scannerId);

            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handleFetchScannerData(Message message, Channel _channel) {
        RawString scannerId = (RawString) message.parameters.get("scannerId");
        int fetchSize = (Integer) message.parameters.get("fetchSize");
        ServerSideScannerPeer scanner = scanners.get(scannerId);
        if (scanner != null) {
            try {
                DataScanner dataScanner = scanner.getScanner();
                List<DataAccessor> records = dataScanner.consume(fetchSize);
                String[] columns = dataScanner.getFieldNames();
                TuplesList tuplesList = new TuplesList(columns, records);

                boolean last = false;
                if (dataScanner.isFinished()) {
                    LOGGER.log(Level.FINEST, "unregistering scanner {0}, resultset is finished", scannerId);
                    scanners.remove(scannerId);
                    last = true;
                }
//                        LOGGER.log(Level.SEVERE, "sending " + converted.size() + " records to scanner " + scannerId);
                _channel.sendReplyMessage(message, Message.RESULTSET_CHUNK(scannerId.toString(), tuplesList, last, dataScanner.transactionId));
            } catch (DataScannerException error) {
                _channel.sendReplyMessage(message, Message.ERROR(error).setParameter("scannerId", scannerId));
            }
        } else {
            _channel.sendReplyMessage(message, Message.ERROR(new Exception("no such scanner " + scannerId + ", only " + scanners.keySet())).setParameter("scannerId", scannerId));
        }
    }

    private void handleCloseScanner(Message message, Channel _channel) {
        RawString scannerId = (RawString) message.parameters.get("scannerId");
        LOGGER.log(Level.SEVERE, "remove scanner " + scannerId + " as requested by client");
        ServerSideScannerPeer removed = scanners.remove(scannerId);
        if (removed != null) {
            removed.clientClose();
            _channel.sendReplyMessage(message, Message.ACK().setParameter("scannerId", scannerId));
        } else {
            _channel.sendReplyMessage(message, Message.ERROR(new Exception("no such scanner " + scannerId)).setParameter("scannerId", scannerId));
        }
    }

    private void sendAuthRequiredError(Channel _channel, Message message) {
        Message error = Message.ERROR(new Exception("autentication required (client " + channel + ")"));
        _channel.sendReplyMessage(message, error);
    }

    private void handleRequestTablespaceDump(Message message, Channel _channel) {
        RawString dumpId = (RawString) message.parameters.get("dumpId");
        int fetchSize = 10;
        if (message.parameters.containsKey("fetchSize")) {
            fetchSize = (Integer) message.parameters.get("fetchSize");
        }
        RawString tableSpace = (RawString) message.parameters.get("tableSpace");
        boolean includeTransactionLog = (Boolean) message.parameters.get("includeTransactionLog");
        server.getManager().dumpTableSpace(tableSpace.toString(), dumpId.toString(), message, _channel, fetchSize, includeTransactionLog);
    }

    private void handleExecuteStatements(Message message, Channel _channel) {
        Long tx = (Long) message.parameters.get("tx");
        long txId = tx != null ? tx : TransactionContext.NOTRANSACTION_ID;
        long transactionId = txId;
        RawString query = (RawString) message.parameters.get("query");
        RawString tableSpace = (RawString) message.parameters.get("tableSpace");
        Boolean returnValues = (Boolean) message.parameters.get("returnValues");
        if (returnValues == null) {
            returnValues = Boolean.FALSE;
        }
        List<List<Object>> batch = (List<List<Object>>) message.parameters.get("params");
        try {

            List<Long> updateCounts = new ArrayList<>(batch.size());
            List<Map<String, Object>> otherDatas = new ArrayList<>(batch.size());
            for (int i = 0; i < batch.size(); i++) {
                List<Object> parameters = batch.get(i);

                TransactionContext transactionContext = new TransactionContext(transactionId);
                TranslatedQuery translatedQuery = server
                        .getManager()
                        .getPlanner().translate(tableSpace.toString(), query.toString(),
                                parameters, false, true, returnValues, -1);
                Statement statement = translatedQuery.plan.mainStatement;

                StatementExecutionResult result = server.getManager().executePlan(translatedQuery.plan, translatedQuery.context, transactionContext);
                if (transactionId > 0 && result.transactionId > 0 && transactionId != result.transactionId) {
                    throw new StatementExecutionException("transactionid changed during batch execution, " + transactionId + "<>" + result.transactionId);
                }
                transactionId = result.transactionId;

                if (result instanceof DMLStatementExecutionResult) {
                    DMLStatementExecutionResult dml = (DMLStatementExecutionResult) result;
                    Map<String, Object> otherData = Collections.emptyMap();
                    if (returnValues && dml.getKey() != null) {
                        TableAwareStatement tableStatement = (TableAwareStatement) statement;
                        Table table = server.getManager().getTableSpaceManager(statement.getTableSpace()).getTableManager(tableStatement.getTable()).getTable();
                        Object key = RecordSerializer.deserializePrimaryKey(dml.getKey().data, table);
                        otherData = new HashMap<>();
                        otherData.put("key", key);
                        if (dml.getNewvalue() != null) {
                            Map<String, Object> newvalue = RecordSerializer.toBean(new Record(dml.getKey(), dml.getNewvalue()), table);
                            otherData.put("newvalue", newvalue);
                        }
                    }
                    updateCounts.add(Long.valueOf(dml.getUpdateCount()));
                    otherDatas.add(otherData);
                } else {
                    _channel.sendReplyMessage(message, Message.ERROR(new Exception("bad result type " + result.getClass() + " (" + result + ")")));
                }
            }
            _channel.sendReplyMessage(message, Message.EXECUTE_STATEMENT_RESULTS(updateCounts, otherDatas, transactionId));
        } catch (HerdDBInternalException err) {
            Message error = Message.ERROR(err);
            if (err instanceof NotLeaderException) {
                error.setParameter("notLeader", "true");
            }
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handleExecuteStatement(Message message, Channel _channel) {
        Long tx = (Long) message.parameters.get("tx");
        long txId = tx != null ? tx : TransactionContext.NOTRANSACTION_ID;
        RawString query = (RawString) message.parameters.get("query");
        RawString tableSpace = (RawString) message.parameters.get("tableSpace");
        Boolean returnValues = (Boolean) message.parameters.get("returnValues");
        if (returnValues == null) {
            returnValues = Boolean.FALSE;
        }
        List<Object> parameters = (List<Object>) message.parameters.get("params");
        if (LOGGER.isLoggable(Level.FINEST)) {
            LOGGER.log(Level.FINEST, "query " + query + " with " + parameters);
        }
        try {
            TransactionContext transactionContext = new TransactionContext(txId);
            TranslatedQuery translatedQuery = server.getManager().getPlanner().translate(tableSpace.toString(),
                    query.toString(), parameters, false, true, returnValues, -1);
            Statement statement = translatedQuery.plan.mainStatement;
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", plan: " + translatedQuery.plan);
            StatementExecutionResult result = server
                    .getManager()
                    .executePlan(translatedQuery.plan, translatedQuery.context, transactionContext);
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", result:" + result);
            if (result instanceof DMLStatementExecutionResult) {
                DMLStatementExecutionResult dml = (DMLStatementExecutionResult) result;
                Map<String, Object> otherData = null;

                if (returnValues && dml.getKey() != null) {
                    TableAwareStatement tableStatement = statement.unwrap(TableAwareStatement.class
                    );
                    Table table = server
                            .getManager()
                            .getTableSpaceManager(statement.getTableSpace()).getTableManager(tableStatement.getTable()).getTable();

                    otherData = new HashMap<>();
                    Object key = RecordSerializer.deserializePrimaryKey(dml.getKey().data, table);
                    otherData.put("key", key);
                    if (dml.getNewvalue() != null) {
                        Map<String, Object> newvalue = RecordSerializer.toBean(new Record(dml.getKey(), dml.getNewvalue()), table);
                        otherData.put("newvalue", newvalue);
                    }

                }
                _channel.sendReplyMessage(message, Message.EXECUTE_STATEMENT_RESULT(dml.getUpdateCount(), otherData, dml.transactionId));
            } else if (result instanceof GetResult) {
                GetResult get = (GetResult) result;
                if (!get.found()) {
                    _channel.sendReplyMessage(message, Message.EXECUTE_STATEMENT_RESULT(0, null, get.transactionId));
                } else {
                    Map<String, Object> record = get.getRecord().toBean(get.getTable());
                    _channel.sendReplyMessage(message, Message.EXECUTE_STATEMENT_RESULT(1, record, get.transactionId));
                }
            } else if (result instanceof TransactionResult) {
                TransactionResult txresult = (TransactionResult) result;
                Map<String, Object> data = new HashMap<>();
                Set<Long> transactionsForTableSpace = openTransactions.computeIfAbsent(
                        RawString.of(statement.getTableSpace()), k -> new ConcurrentSkipListSet<>());
                switch (txresult.getOutcome()) {
                    case BEGIN: {
                        transactionsForTableSpace.add(txresult.getTransactionId());
                        break;
                    }
                    case COMMIT:
                    case ROLLBACK:
                        transactionsForTableSpace.remove(txresult.getTransactionId());
                        break;
                }
                data.put("tx", txresult.getTransactionId());
                _channel.sendReplyMessage(message, Message.EXECUTE_STATEMENT_RESULT(1, data, txresult.transactionId));
            } else if (result instanceof DDLStatementExecutionResult) {
                DDLStatementExecutionResult ddl = (DDLStatementExecutionResult) result;
                _channel.sendReplyMessage(message, Message.EXECUTE_STATEMENT_RESULT(1, null, ddl.transactionId));
            } else {
                _channel.sendReplyMessage(message, Message.ERROR(new Exception("unknown result type " + result.getClass() + " (" + result + ")")));
            }
        } catch (DuplicatePrimaryKeyException err) {
            LOGGER.log(Level.SEVERE, "error on query " + query + ", parameters: " + parameters + ":" + err, err);
            Message error = Message.ERROR(err);
            _channel.sendReplyMessage(message, error);
        } catch (NotLeaderException err) {
            Message error = Message.ERROR(err);
            error.setParameter("notLeader", "true");
            _channel.sendReplyMessage(message, error);
        } catch (StatementExecutionException err) {
            Message error = Message.ERROR(err);
            _channel.sendReplyMessage(message, error);
        } catch (RuntimeException err) {
            LOGGER.log(Level.SEVERE, "unexpected error on query " + query + ", parameters: " + parameters + ":" + err, err);
            Message error = Message.ERROR(err);
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handleTxCommand(Message message, Channel _channel) {
        Long tx = (Long) message.parameters.get("tx");
        long txId = tx != null ? tx : TransactionContext.NOTRANSACTION_ID;
        int type = (Integer) message.parameters.get("t");
        RawString tableSpace = (RawString) message.parameters.get("tableSpace");
        try {
            TransactionContext transactionContext = new TransactionContext(txId);
            Statement statement;
            switch (type) {
                case Message.TX_COMMAND_COMMIT_TRANSACTION:
                    statement = new CommitTransactionStatement(tableSpace.toString(), txId);
                    break;
                case Message.TX_COMMAND_ROLLBACK_TRANSACTION:
                    statement = new RollbackTransactionStatement(tableSpace.toString(), txId);
                    break;
                case Message.TX_COMMAND_BEGIN_TRANSACTION:
                    statement = new BeginTransactionStatement(tableSpace.toString());
                    break;
                default:
                    statement = null;

            }
            if (statement == null) {
                _channel.sendReplyMessage(message, Message.ERROR(new Exception("unknown command type " + type)));
            } else {
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", plan: " + translatedQuery.plan);
                StatementExecutionResult result = server
                        .getManager()
                        .executeStatement(statement, new StatementEvaluationContext(), transactionContext);
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", result:" + result);
                if (result instanceof TransactionResult) {
                    TransactionResult txresult = (TransactionResult) result;
                    Map<String, Object> data = new HashMap<>();
                    Set<Long> transactionsForTableSpace = openTransactions.computeIfAbsent(
                            RawString.of(statement.getTableSpace()), k -> new ConcurrentSkipListSet<>());
                    switch (txresult.getOutcome()) {
                        case BEGIN: {
                            transactionsForTableSpace.add(txresult.getTransactionId());
                            break;
                        }
                        case COMMIT:
                        case ROLLBACK:
                            transactionsForTableSpace.remove(txresult.getTransactionId());
                            break;
                    }
                    data.put("tx", txresult.getTransactionId());
                    _channel.sendReplyMessage(message, Message.EXECUTE_STATEMENT_RESULT(1, data, txresult.transactionId));
                } else {
                    _channel.sendReplyMessage(message, Message.ERROR(new Exception("unknown result type " + result.getClass() + " (" + result + ")")));
                }
            }
        } catch (NotLeaderException err) {
            Message error = Message.ERROR(err);
            error.setParameter("notLeader", "true");
            _channel.sendReplyMessage(message, error);
        } catch (StatementExecutionException err) {
            Message error = Message.ERROR(err);
            _channel.sendReplyMessage(message, error);
        } catch (RuntimeException err) {
            LOGGER.log(Level.SEVERE, "unexpected error on tx command: ", err);
            Message error = Message.ERROR(err);
            _channel.sendReplyMessage(message, error);
        }
    }

    private void handleSaslTokenMessage(Channel _channel, Message message) {
        try {
            if (saslNettyServer == null) {
                Message error = Message.ERROR(new Exception("Authentication failed (SASL protocol error)"));
                _channel.sendReplyMessage(message, error);
                return;
            }
            byte[] token = (byte[]) message.parameters.get("token");
            byte[] responseToken = saslNettyServer.response(token);
            Message tokenChallenge = Message.SASL_TOKEN_SERVER_RESPONSE(responseToken);
            if (saslNettyServer.isComplete()) {
                username = saslNettyServer.getUserName();
                authenticated = true;
                LOGGER.log(Level.INFO, "client {0} completed SASL authentication as {1}", new Object[]{channel, username});
                saslNettyServer = null;
            }
            _channel.sendReplyMessage(message, tokenChallenge);
        } catch (Exception err) {
            if (err instanceof javax.security.sasl.SaslException) {
                LOGGER.log(Level.SEVERE, "SASL error " + err, err);
                Message error = Message.ERROR(new Exception("Authentication failed (SASL error)"));
                _channel.sendReplyMessage(message, error);
            } else {
                Message error = Message.ERROR(err);
                _channel.sendReplyMessage(message, error);
            }
        }
    }

    private void handleSaslTokenMessageRequest(Message message, Channel _channel) {
        try {
            byte[] token = (byte[]) message.parameters.get("token");
            if (token == null) {
                token = new byte[0];
            }
            RawString mech = (RawString) message.parameters.get("mech");
            if (saslNettyServer == null) {
                saslNettyServer = new SaslNettyServer(server, mech.toString());
            }
            byte[] responseToken = saslNettyServer.response(token);
            Message tokenChallenge = Message.SASL_TOKEN_SERVER_RESPONSE(responseToken);
            _channel.sendReplyMessage(message, tokenChallenge);
        } catch (Exception err) {
            Message error = Message.ERROR(err);
            _channel.sendReplyMessage(message, error);
        }
    }

    @Override
    public void channelClosed(Channel channel) {
        LOGGER.log(Level.INFO, "channelClosed {0}", this);
        freeResources();
        this.server.connectionClosed(this);
    }

    private void freeResources() {
        if (!openTransactions.isEmpty()) {
            LOGGER.log(Level.SEVERE, "freeResources {0}, {1} open transactions", new Object[]{this, openTransactions.size()});
            for (Map.Entry<RawString, Set<Long>> openTransaction : openTransactions.entrySet()) {
                RawString tableSpace = openTransaction.getKey();
                for (Long tx : openTransaction.getValue()) {
                    try {
                        LOGGER.log(Level.SEVERE, "rolling back trasaction tx=" + tx + " on tablespace " + tableSpace);
                        RollbackTransactionStatement statement = new RollbackTransactionStatement(tableSpace.toString(), tx);
                        StatementExecutionResult result = server.getManager().executeStatement(statement, StatementEvaluationContext.DEFAULT_EVALUATION_CONTEXT(), TransactionContext.NO_TRANSACTION);
                        LOGGER.log(Level.SEVERE, "rollback outcome trasaction tx=" + tx + " on tablespace " + tableSpace + ": " + result);
                    } catch (Throwable t) {
                        LOGGER.log(Level.SEVERE, "error while rolling back trasaction tx=" + tx + " on tablespace " + tableSpace + " :" + t, t);
                    }
                }
            }

            openTransactions.clear();
        }
        scanners.values().forEach(s -> s.close());
        scanners.clear();
    }

    ConnectionsInfo.ConnectionInfo toConnectionInfo() {
        return new ConnectionsInfo.ConnectionInfo(id + "", connectionTs, username, address);
    }

    @Override
    public String toString() {
        return "ServerSideConnectionPeer{" + "id=" + id + ", channel=" + channel + ", address=" + address + ", username=" + username + '}';
    }

}
