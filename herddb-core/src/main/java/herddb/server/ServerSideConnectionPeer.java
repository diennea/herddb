/*
 Licensed to Diennea S.r.l. under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Diennea S.r.l. licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

 */
package herddb.server;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import herddb.backup.DumpedLogEntry;
import herddb.codec.RecordSerializer;
import herddb.core.HerdDBInternalException;
import herddb.core.RunningStatementInfo;
import herddb.core.TableManager;
import herddb.core.stats.ConnectionsInfo;
import herddb.log.LogSequenceNumber;
import herddb.model.DDLStatementExecutionResult;
import herddb.model.DMLStatementExecutionResult;
import herddb.model.DataScanner;
import herddb.model.DataScannerException;
import herddb.model.DuplicatePrimaryKeyException;
import herddb.model.GetResult;
import herddb.model.Index;
import herddb.model.NotLeaderException;
import herddb.model.Record;
import herddb.model.ScanResult;
import herddb.model.Statement;
import herddb.model.StatementEvaluationContext;
import herddb.model.StatementExecutionException;
import herddb.model.StatementExecutionResult;
import herddb.model.Table;
import herddb.model.TableAwareStatement;
import herddb.model.Transaction;
import herddb.model.TransactionContext;
import herddb.model.TransactionResult;
import herddb.model.commands.BeginTransactionStatement;
import herddb.model.commands.CommitTransactionStatement;
import herddb.model.commands.RollbackTransactionStatement;
import herddb.model.commands.SQLPlannedOperationStatement;
import herddb.model.commands.ScanStatement;
import herddb.network.Channel;
import herddb.network.ChannelEventListener;
import herddb.network.MessageBuilder;
import herddb.network.RequestWrapper;
import herddb.network.ServerSideConnection;
import herddb.proto.flatbuf.MessageType;
import herddb.proto.flatbuf.Request;
import herddb.security.sasl.SaslNettyServer;
import herddb.sql.TranslatedQuery;
import herddb.utils.Bytes;
import herddb.utils.DataAccessor;
import herddb.utils.MessageUtils;
import herddb.utils.RawString;
import herddb.utils.TuplesList;
import io.netty.buffer.ByteBuf;

/**
 * Handles a client Connection
 *
 * @author enrico.olivelli
 */
public class ServerSideConnectionPeer implements ServerSideConnection, ChannelEventListener {

    private static final Logger LOGGER = Logger.getLogger(ServerSideConnectionPeer.class.getName());
    private static final AtomicLong IDGENERATOR = new AtomicLong();
    private final long id = IDGENERATOR.incrementAndGet();
    private final Channel channel;
    private final Server server;
    /**
     * Open scanners. The ID is generated by the client
     */
    private final ConcurrentMap<RawString, ServerSideScannerPeer> scanners = new ConcurrentHashMap<>();
    private final ConcurrentMap<RawString, Set<Long>> openTransactions = new ConcurrentHashMap<>();
    private volatile boolean authenticated;
    private volatile SaslNettyServer saslNettyServer;
    private final String address;
    private volatile String username = "";
    private final long connectionTs = System.currentTimeMillis();

    public ServerSideConnectionPeer(Channel channel, Server server) {
        this.channel = channel;
        this.channel.setMessagesReceiver(this);
        this.server = server;
        this.address = channel.getRemoteAddress();
    }

    @Override
    public long getConnectionId() {
        return id;
    }

    @Override
    public void requestReceived(RequestWrapper messageWrapper, Channel _channel) {
        Request message = messageWrapper.request;
        try {
            LOGGER.log(Level.FINEST, "messageReceived {0}", message);

            switch (message.type()) {
                case MessageType.TYPE_SASL_TOKEN_MESSAGE_REQUEST: {
                    handleSaslTokenMessageRequest(message, _channel);
                    break;
                }
                case MessageType.TYPE_SASL_TOKEN_MESSAGE_TOKEN: {
                    handleSaslTokenMessage(_channel, message);
                    break;
                }
                case MessageType.TYPE_EXECUTE_STATEMENT: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleExecuteStatement(message, _channel);
                }
                break;
                case MessageType.TYPE_TX_COMMAND: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleTxCommand(message, _channel);
                }
                break;
                case MessageType.TYPE_EXECUTE_STATEMENTS: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleExecuteStatements(message, _channel);
                }
                break;
                case MessageType.TYPE_REQUEST_TABLESPACE_DUMP: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleRequestTablespaceDump(message, _channel);
                }
                break;
                case MessageType.TYPE_REQUEST_TABLE_RESTORE: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleRequestTableRestore(message, _channel);
                }
                break;
                case MessageType.TYPE_PUSH_TABLE_DATA: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handlePushTableData(message, _channel);
                }
                break;
                case MessageType.TYPE_TABLE_RESTORE_FINISHED: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleTableRestoreFinished(message, _channel);
                }
                break;
                case MessageType.TYPE_RESTORE_FINISHED: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleRestoreFinished(message, _channel);
                }
                break;
                case MessageType.TYPE_PUSH_TXLOGCHUNK: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handlePushTxLogChunk(message, _channel);
                }
                break;
                case MessageType.TYPE_PUSH_TRANSACTIONSBLOCK: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handlePushTransactionsBlock(message, _channel);
                }
                break;
                case MessageType.TYPE_OPENSCANNER: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleOpenScanner(message, _channel);
                    break;
                }

                case MessageType.TYPE_FETCHSCANNERDATA: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleFetchScannerData(message, _channel);
                }
                break;

                case MessageType.TYPE_CLOSESCANNER: {
                    if (!authenticated) {
                        sendAuthRequiredError(_channel, message);
                        break;
                    }
                    handleCloseScanner(message, _channel);
                }
                break;

                default:
                    _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), new Exception("unsupported message type " + message.type())));
            }
        } finally {
            messageWrapper.release();
        }
    }

    private void handleRequestTableRestore(Request message, Channel _channel) {
        try {
            RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
            byte[] table = MessageUtils.bufferToArray(message.tableDefinition().schemaAsByteBuffer());
            long dumpLedgerId = message.dumpLedgerId();
            long dumpOffset = message.dumpOffset();
            Table tableSchema = Table.deserialize(table);
            tableSchema = Table
                    .builder()
                    .cloning(tableSchema)
                    .tablespace(tableSpace.toString())
                    .build();
            server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .beginRestoreTable(tableSchema.serialize(), new LogSequenceNumber(dumpLedgerId, dumpOffset));

            _channel.sendReplyMessage(message.id(), MessageBuilder.ACK(message.id()));
        } catch (StatementExecutionException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    private void handleTableRestoreFinished(Request message, Channel _channel) {
        try {
            RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
            RawString table = MessageUtils.readRawString(message.tableNameAsByteBuffer());

            int numIndexes = message.indexesDefinitionLength();
            List<Index> indexes = new ArrayList<>(numIndexes);
            for (int i = 0; i < numIndexes; i++) {
                indexes.add(Index.deserialize(MessageUtils.bufferToArray(message.indexesDefinition(i).schemaAsByteBuffer())));
            }
            LOGGER.log(Level.INFO, "tableRestoreFinished, table {0}, with {1} indexes", new Object[]{table, indexes.size()});

            server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .restoreTableFinished(table.toString(), indexes);

            _channel.sendReplyMessage(message.id(), MessageBuilder.ACK(message.id()));
        } catch (StatementExecutionException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    private void handleRestoreFinished(Request message, Channel _channel) {
        try {
            RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());

            server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .restoreFinished();

            _channel.sendReplyMessage(message.id(), MessageBuilder.ACK(message.id()));
        } catch (StatementExecutionException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    private void handlePushTableData(Request message, Channel _channel) {
        try {
            RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
            RawString table = MessageUtils.readRawString(message.tableNameAsByteBuffer());

            long _start = System.currentTimeMillis();
            int size = message.rawDataChunkLength();
            List<Record> records = new ArrayList<>(size);
            for (int i = 0; i < size; i++) {
                herddb.proto.flatbuf.KeyValue keyValue = message.rawDataChunk(i);
                records.add(new Record(
                        Bytes.from_array(MessageUtils.bufferToArray(keyValue.keyAsByteBuffer())),
                        Bytes.from_array(MessageUtils.bufferToArray(keyValue.valueAsByteBuffer()))));
            }
            LOGGER.log(Level.INFO, "Received {0} records for restore of table {1} in tableSpace {2}", new Object[]{records.size(), table, tableSpace});
            TableManager tableManager = (TableManager) server.getManager()
                    .getTableSpaceManager(tableSpace.toString())
                    .getTableManager(table.toString());
            tableManager.writeFromDump(records);
            long _stop = System.currentTimeMillis();
            LOGGER.log(Level.INFO, "Time restore {0} records: data {1} ms", new Object[]{records.size(), _stop - _start});
            _channel.sendReplyMessage(message.id(), MessageBuilder.ACK(message.id()));
        } catch (StatementExecutionException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    private void handlePushTxLogChunk(Request message, Channel _channel) {
        try {
            RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());

            int size = message.rawDataChunkLength();
            List<DumpedLogEntry> entries = new ArrayList<>(size);
            for (int i = 0; i < size; i++) {
                herddb.proto.flatbuf.KeyValue kv = message.rawDataChunk(i);
                entries.add(new DumpedLogEntry(
                        LogSequenceNumber.deserialize(MessageUtils.bufferToArray(kv.keyAsByteBuffer())),
                        MessageUtils.bufferToArray(kv.valueAsByteBuffer())));
            }
            LOGGER.log(Level.INFO, "Received {0} records for restore of txlog in tableSpace {1}", new Object[]{entries.size(), tableSpace});

            server.getManager().getTableSpaceManager(tableSpace.toString())
                    .restoreRawDumpedEntryLogs(entries);

            _channel.sendReplyMessage(message.id(), MessageBuilder.ACK(message.id()));
        } catch (Exception err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    private void handlePushTransactionsBlock(Request message, Channel _channel) {
        try {
            RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());

            String _tableSpace = tableSpace.toString();
            int size = message.dumpTxLogEntriesLength();
            List<Transaction> entries = new ArrayList<>(size);
            for (int i = 0; i < size; i++) {
                herddb.proto.flatbuf.TxLogEntry kv = message.dumpTxLogEntries(i);
                entries.add(Transaction.deserialize(_tableSpace, MessageUtils.bufferToArray(kv.entryAsByteBuffer())));
            }

            LOGGER.log(Level.INFO, "Received " + entries.size() + " records for restore of transactions in tableSpace " + tableSpace);

            server.getManager().getTableSpaceManager(_tableSpace).restoreRawDumpedTransactions(entries);

            _channel.sendReplyMessage(message.id(), MessageBuilder.ACK(message.id()));
        } catch (Exception err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    private void handleOpenScanner(Request message, Channel _channel) {
        RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
        long txId = message.tx();
        RawString query = MessageUtils.readRawString(message.queryAsByteBuffer());
        RawString scannerId = MessageUtils.readRawString(message.scannerIdAsByteBuffer());
        int fetchSize = message.fetchSize();
        if (fetchSize <= 0) {
            fetchSize = 10;
        }
        int maxRows = (int) message.maxRows(); // default 0

        List<Object> parameters = MessageUtils.decodeAnyValueList(message.params());        
        if (LOGGER.isLoggable(Level.FINEST)) {
            LOGGER.log(Level.FINEST, "openScanner txId+" + txId + ", fetchSize " + fetchSize + ", maxRows " + maxRows + "," + query + " with " + parameters);
        }
        String _query = query.toString();
        String _tablespace = tableSpace.toString();
        RunningStatementInfo statementInfo = new RunningStatementInfo(_query, System.currentTimeMillis(), _tablespace, parameters != null && parameters.size() > 0 ? parameters.size() + " params" : "");
        try {
            TranslatedQuery translatedQuery = server
                    .getManager()
                    .getPlanner().translate(_tablespace,
                            _query, parameters, true, true, false, maxRows);

            if (LOGGER.isLoggable(Level.FINEST)) {
                LOGGER.log(Level.FINEST, query + " -> " + translatedQuery.plan.mainStatement);
            }

            TransactionContext transactionContext = new TransactionContext(txId);
            if (translatedQuery.plan.mainStatement instanceof SQLPlannedOperationStatement
                    || translatedQuery.plan.mainStatement instanceof ScanStatement
                    || translatedQuery.plan.joinStatements != null) {

                server.getManager().registerRunningStatement(statementInfo);
                ScanResult scanResult = (ScanResult) server.getManager().executePlan(translatedQuery.plan, translatedQuery.context, transactionContext);
                DataScanner dataScanner = scanResult.dataScanner;

                ServerSideScannerPeer scanner = new ServerSideScannerPeer(dataScanner);

                String[] columns = dataScanner.getFieldNames();
                List<DataAccessor> records = dataScanner.consume(fetchSize);
                TuplesList tuplesList = new TuplesList(columns, records);
                boolean last = dataScanner.isFinished();
                LOGGER.log(Level.FINEST, "sending first {0} records to scanner {1} query {2}", new Object[]{records.size(), scannerId, query});
                if (!last) {
                    scanners.put(scannerId, scanner);
                }
                _channel.sendReplyMessage(message.id(),
                        MessageBuilder.RESULTSET_CHUNK(message.id(), tuplesList, last, dataScanner.transactionId));
            } else {
                _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), new Exception("unsupported query type for scan " + query + ": PLAN is " + translatedQuery.plan)));
            }
        } catch (DataScannerException | RuntimeException err) {
            LOGGER.log(Level.SEVERE, "error on scanner " + scannerId + ": " + err, err);
            scanners.remove(scannerId);

            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        } finally {
            server.getManager().unregisterRunningStatement(statementInfo);
        }
    }

    private void handleFetchScannerData(Request message, Channel _channel) {
        RawString scannerId = MessageUtils.readRawString(message.scannerIdAsByteBuffer());
        int fetchSize = message.fetchSize();
        if (fetchSize <= 0) {
            fetchSize = 10;
        }
        ServerSideScannerPeer scanner = scanners.get(scannerId);
        if (scanner != null) {
            try {
                DataScanner dataScanner = scanner.getScanner();
                List<DataAccessor> records = dataScanner.consume(fetchSize);
                String[] columns = dataScanner.getFieldNames();
                TuplesList tuplesList = new TuplesList(columns, records);

                boolean last = false;
                if (dataScanner.isFinished()) {
                    LOGGER.log(Level.FINEST, "unregistering scanner {0}, resultset is finished", scannerId);
                    scanners.remove(scannerId);
                    last = true;
                }
//                        LOGGER.log(Level.SEVERE, "sending " + converted.size() + " records to scanner " + scannerId);
                _channel.sendReplyMessage(message.id(), MessageBuilder.RESULTSET_CHUNK(message.id(), tuplesList, last, dataScanner.transactionId));
            } catch (DataScannerException error) {
                _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), error));
            }
        } else {
            _channel.sendReplyMessage(message.id(),
                    MessageBuilder.ERROR(message.id(), new Exception("no such scanner " + scannerId + ", only " + scanners.keySet())));
        }
    }

    private void handleCloseScanner(Request message, Channel _channel) {
        RawString scannerId = MessageUtils.readRawString(message.scannerIdAsByteBuffer());
        LOGGER.log(Level.SEVERE, "remove scanner " + scannerId + " as requested by client");
        ServerSideScannerPeer removed = scanners.remove(scannerId);
        if (removed != null) {
            removed.clientClose();
            _channel.sendReplyMessage(message.id(), MessageBuilder.ACK(message.id()));
        } else {
            _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), new Exception("no such scanner " + scannerId)));
        }
    }

    private void sendAuthRequiredError(Channel _channel, Request message) {
        ByteBuf error = MessageBuilder.ERROR(message.id(), new Exception("autentication required (client " + channel + ")"));
        _channel.sendReplyMessage(message.id(), error);
    }

    private void handleRequestTablespaceDump(Request message, Channel _channel) {
        RawString dumpId = MessageUtils.readRawString(message.dumpIdAsByteBuffer());
        int fetchSize = message.fetchSize();
        if (fetchSize <= 0) {
            fetchSize = 10;
        }
        RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
        boolean includeTransactionLog = message.includeTransactionLog();
        server.getManager().dumpTableSpace(tableSpace.toString(), dumpId.toString(), message, _channel, fetchSize, includeTransactionLog);
    }

    private void handleExecuteStatements(Request message, Channel _channel) {
        long txId = message.tx();
        long transactionId = txId;
        RawString query = MessageUtils.readRawString(message.queryAsByteBuffer());
        RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
        boolean returnValues = message.returnValues();

        int numStatements = message.batchParamsLength();
        List<List<Object>> batch = new ArrayList<>(numStatements);
        for (int i = 0; i < numStatements; i++) {
            List<Object> batchParams = MessageUtils.decodeAnyValueList(message.batchParams(i));
            batch.add(batchParams);
        }
        String _query = query.toString();
        String _tablespace = tableSpace.toString();
        RunningStatementInfo statementInfo = new RunningStatementInfo(_query, System.currentTimeMillis(), _tablespace, "batch of " + numStatements);
        try {

            List<Long> updateCounts = new ArrayList<>(numStatements);
            List<Map<String, Object>> otherDatas = new ArrayList<>(numStatements);
            for (int i = 0; i < numStatements; i++) {
                List<Object> parameters = batch.get(i);

                TransactionContext transactionContext = new TransactionContext(transactionId);
                TranslatedQuery translatedQuery = server
                        .getManager()
                        .getPlanner().translate(_tablespace, _query,
                                parameters, false, true, returnValues, -1);
                Statement statement = translatedQuery.plan.mainStatement;
                server.getManager().registerRunningStatement(statementInfo);
                StatementExecutionResult result = server.getManager().executePlan(translatedQuery.plan, translatedQuery.context, transactionContext);
                if (transactionId > 0 && result.transactionId > 0 && transactionId != result.transactionId) {
                    throw new StatementExecutionException("transactionid changed during batch execution, " + transactionId + "<>" + result.transactionId);
                }
                transactionId = result.transactionId;

                if (result instanceof DMLStatementExecutionResult) {
                    DMLStatementExecutionResult dml = (DMLStatementExecutionResult) result;
                    Map<String, Object> otherData = Collections.emptyMap();
                    if (returnValues && dml.getKey() != null) {
                        TableAwareStatement tableStatement = (TableAwareStatement) statement;
                        Table table = server.getManager().getTableSpaceManager(statement.getTableSpace()).getTableManager(tableStatement.getTable()).getTable();
                        Object key = RecordSerializer.deserializePrimaryKey(dml.getKey().data, table);
                        otherData = new HashMap<>();
                        otherData.put("_key", key);
                        if (dml.getNewvalue() != null) {
                            Map<String, Object> newvalue = RecordSerializer.toBean(new Record(dml.getKey(), dml.getNewvalue()), table);
                            otherData.putAll(newvalue);
                        }
                    }
                    updateCounts.add(Long.valueOf(dml.getUpdateCount()));
                    otherDatas.add(otherData);
                } else if (result instanceof DDLStatementExecutionResult) {
                    Map<String, Object> otherData = Collections.emptyMap();
                    updateCounts.add(Long.valueOf(1));
                    otherDatas.add(otherData);
                } else {
                    _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), new Exception("bad result type " + result.getClass() + " (" + result + ")")));
                }
            }
            _channel.sendReplyMessage(message.id(), MessageBuilder.EXECUTE_STATEMENT_RESULTS(message.id(), updateCounts, otherDatas, transactionId));
        } catch (HerdDBInternalException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, " query was '" + _query + "', with values " + batch, err instanceof NotLeaderException);
            _channel.sendReplyMessage(message.id(), error);
        } finally {
            server.getManager().unregisterRunningStatement(statementInfo);
        }
    }

    private void handleExecuteStatement(Request message, Channel _channel) {
        long tx = message.tx();
        long txId = message.tx();
        RawString query = MessageUtils.readRawString(message.queryAsByteBuffer());
        RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
        boolean returnValues = message.returnValues();

        List<Object> parameters = MessageUtils.decodeAnyValueList(message.params());
        if (LOGGER.isLoggable(Level.FINEST)) {
            LOGGER.log(Level.FINEST, "query " + query + " with " + parameters);
        }
        String _query = query.toString();
        String _tablespace = tableSpace.toString();
        RunningStatementInfo statementInfo = new RunningStatementInfo(_query, System.currentTimeMillis(), _tablespace, parameters != null && parameters.size() > 0 ? parameters.size() + " params" : "");
        try {
            TransactionContext transactionContext = new TransactionContext(txId);
            TranslatedQuery translatedQuery = server.getManager().getPlanner().translate(_tablespace,
                    _query, parameters, false, true, returnValues, -1);
            Statement statement = translatedQuery.plan.mainStatement;
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", plan: " + translatedQuery.plan);
            server.getManager().registerRunningStatement(statementInfo);
            StatementExecutionResult result = server
                    .getManager()
                    .executePlan(translatedQuery.plan, translatedQuery.context, transactionContext);
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", result:" + result);
            if (result instanceof DMLStatementExecutionResult) {
                DMLStatementExecutionResult dml = (DMLStatementExecutionResult) result;
                Map<String, Object> newRecord = null;

                if (returnValues && dml.getKey() != null) {
                    TableAwareStatement tableStatement = statement.unwrap(TableAwareStatement.class);
                    Table table = server
                            .getManager()
                            .getTableSpaceManager(statement.getTableSpace()).getTableManager(tableStatement.getTable()).getTable();
                    newRecord = new HashMap<>();
                    Object newKey = RecordSerializer.deserializePrimaryKey(dml.getKey().data, table);
                    newRecord.put("_key", newKey);
                    if (dml.getNewvalue() != null) {
                        newRecord.putAll(RecordSerializer.toBean(new Record(dml.getKey(), dml.getNewvalue()), table));
                    }
                }
                _channel.sendReplyMessage(message.id(), MessageBuilder.EXECUTE_STATEMENT_RESULT(
                        message.id(), dml.getUpdateCount(), newRecord, dml.transactionId));
            } else if (result instanceof GetResult) {
                GetResult get = (GetResult) result;
                if (!get.found()) {
                    _channel.sendReplyMessage(message.id(), MessageBuilder.EXECUTE_STATEMENT_RESULT(message.id(), 0, null, get.transactionId));
                } else {
                    Map<String, Object> record = get.getRecord().toBean(get.getTable());
                    _channel.sendReplyMessage(message.id(), MessageBuilder.EXECUTE_STATEMENT_RESULT(message.id(), 1, record, get.transactionId));
                }
            } else if (result instanceof TransactionResult) {
                TransactionResult txresult = (TransactionResult) result;
                Set<Long> transactionsForTableSpace = openTransactions.computeIfAbsent(
                        RawString.of(statement.getTableSpace()), k -> new ConcurrentSkipListSet<>());
                switch (txresult.getOutcome()) {
                    case BEGIN: {
                        transactionsForTableSpace.add(txresult.getTransactionId());
                        break;
                    }
                    case COMMIT:
                    case ROLLBACK:
                        transactionsForTableSpace.remove(txresult.getTransactionId());
                        break;
                }
                _channel.sendReplyMessage(message.id(), MessageBuilder.EXECUTE_STATEMENT_RESULT(message.id(), 1, null, txresult.transactionId));
            } else if (result instanceof DDLStatementExecutionResult) {
                DDLStatementExecutionResult ddl = (DDLStatementExecutionResult) result;
                _channel.sendReplyMessage(message.id(), MessageBuilder.EXECUTE_STATEMENT_RESULT(message.id(), 1, null, ddl.transactionId));
            } else {
                _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), new Exception("unknown result type " + result.getClass() + " (" + result + ")")));
            }
        } catch (DuplicatePrimaryKeyException err) {
            LOGGER.log(Level.SEVERE, "error on query " + query + ", parameters: " + parameters + ":" + err, err);
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, " query was '" + _query + "'", false);
            _channel.sendReplyMessage(message.id(), error);
        } catch (NotLeaderException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, " query was '" + _query + "'", true);
            _channel.sendReplyMessage(message.id(), error);
        } catch (StatementExecutionException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, " query was '" + _query + "'", false);
            _channel.sendReplyMessage(message.id(), error);
        } catch (RuntimeException err) {
            LOGGER.log(Level.SEVERE, "unexpected error on query " + query + ", parameters: " + parameters + ":" + err, err);
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, " query was '" + _query + "'", false);
            _channel.sendReplyMessage(message.id(), error);
        } finally {
            server.getManager().unregisterRunningStatement(statementInfo);
        }
    }

    private void handleTxCommand(Request message, Channel _channel) {
        long txId = message.tx();
        int type = message.txCommand();
        RawString tableSpace = MessageUtils.readRawString(message.tableSpaceAsByteBuffer());
        try {
            TransactionContext transactionContext = new TransactionContext(txId);
            Statement statement;
            switch (type) {
                case MessageBuilder.TX_COMMAND_COMMIT_TRANSACTION:
                    statement = new CommitTransactionStatement(tableSpace.toString(), txId);
                    break;
                case MessageBuilder.TX_COMMAND_ROLLBACK_TRANSACTION:
                    statement = new RollbackTransactionStatement(tableSpace.toString(), txId);
                    break;
                case MessageBuilder.TX_COMMAND_BEGIN_TRANSACTION:
                    statement = new BeginTransactionStatement(tableSpace.toString());
                    break;
                default:
                    statement = null;

            }
            if (statement == null) {
                _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), new Exception("unknown command type " + type)));
            } else {
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", plan: " + translatedQuery.plan);                
                StatementExecutionResult result = server
                        .getManager()
                        .executeStatement(statement, new StatementEvaluationContext(), transactionContext);
//                    LOGGER.log(Level.SEVERE, "query " + query + ", " + parameters + ", result:" + result);
                if (result instanceof TransactionResult) {
                    TransactionResult txresult = (TransactionResult) result;

                    Set<Long> transactionsForTableSpace = openTransactions.computeIfAbsent(
                            RawString.of(statement.getTableSpace()), k -> new ConcurrentSkipListSet<>());
                    switch (txresult.getOutcome()) {
                        case BEGIN: {
                            transactionsForTableSpace.add(txresult.getTransactionId());
                            break;
                        }
                        case COMMIT:
                        case ROLLBACK:
                            transactionsForTableSpace.remove(txresult.getTransactionId());
                            break;
                    }

                    _channel.sendReplyMessage(message.id(), MessageBuilder.EXECUTE_STATEMENT_RESULT(message.id(), 1, null, txresult.transactionId));
                } else {
                    _channel.sendReplyMessage(message.id(), MessageBuilder.ERROR(message.id(), new Exception("unknown result type " + result.getClass() + " (" + result + ")")));
                }
            }
        } catch (NotLeaderException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err, null, true);
            _channel.sendReplyMessage(message.id(), error);
        } catch (StatementExecutionException err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err);
            _channel.sendReplyMessage(message.id(), error);
        } catch (RuntimeException err) {
            LOGGER.log(Level.SEVERE, "unexpected error on tx command: ", err);
            ByteBuf error = MessageBuilder.ERROR(message.id(), err);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    private void handleSaslTokenMessage(Channel _channel, Request message) {
        try {
            if (saslNettyServer == null) {
                ByteBuf error = MessageBuilder.ERROR(message.id(), new Exception("Authentication failed (SASL protocol error)"));
                _channel.sendReplyMessage(message.id(), error);
                return;
            }
            byte[] token = MessageUtils.bufferToArray(message.tokenAsByteBuffer());
            byte[] responseToken = saslNettyServer.response(token);
            ByteBuf tokenChallenge = MessageBuilder.SASL_TOKEN_SERVER_RESPONSE(message.id(), responseToken);
            if (saslNettyServer.isComplete()) {
                username = saslNettyServer.getUserName();
                authenticated = true;
                LOGGER.log(Level.INFO, "client {0} connected as {1}", new Object[]{channel.getRemoteAddress(), username});
                saslNettyServer = null;
            }
            _channel.sendReplyMessage(message.id(), tokenChallenge);
        } catch (Exception err) {
            if (err instanceof javax.security.sasl.SaslException) {
                LOGGER.log(Level.SEVERE, "SASL error " + err, err);
                ByteBuf error = MessageBuilder.ERROR(message.id(), new Exception("Authentication failed (SASL error)"));
                _channel.sendReplyMessage(message.id(), error);
            } else {
                LOGGER.log(Level.SEVERE, "Bad auth error " + err, err);
                ByteBuf error = MessageBuilder.ERROR(message.id(), err);
                _channel.sendReplyMessage(message.id(), error);
            }
        }
    }

    private void handleSaslTokenMessageRequest(Request message, Channel _channel) {
        try {
            byte[] token = MessageUtils.bufferToArray(message.tokenAsByteBuffer());
            if (token == null) {
                token = new byte[0];
            }
            RawString mech = MessageUtils.readRawString(message.mechAsByteBuffer());
            if (saslNettyServer == null) {
                saslNettyServer = new SaslNettyServer(server, mech.toString());
            }
            byte[] responseToken = saslNettyServer.response(token);
            ByteBuf tokenChallenge = MessageBuilder.SASL_TOKEN_SERVER_RESPONSE(message.id(), responseToken);
            _channel.sendReplyMessage(message.id(), tokenChallenge);
        } catch (Exception err) {
            ByteBuf error = MessageBuilder.ERROR(message.id(), err);
            _channel.sendReplyMessage(message.id(), error);
        }
    }

    @Override
    public void channelClosed(Channel channel) {
        LOGGER.log(Level.INFO, "channelClosed {0}", this);
        freeResources();
        this.server.connectionClosed(this);
    }

    private void freeResources() {
        if (!openTransactions.isEmpty()) {
            LOGGER.log(Level.SEVERE, "freeResources {0}, {1} open transactions", new Object[]{this, openTransactions.size()});
            for (Map.Entry<RawString, Set<Long>> openTransaction : openTransactions.entrySet()) {
                RawString tableSpace = openTransaction.getKey();
                for (Long tx : openTransaction.getValue()) {
                    try {
                        LOGGER.log(Level.SEVERE, "rolling back trasaction tx=" + tx + " on tablespace " + tableSpace);
                        RollbackTransactionStatement statement = new RollbackTransactionStatement(tableSpace.toString(), tx);
                        StatementExecutionResult result = server.getManager().executeStatement(statement, StatementEvaluationContext.DEFAULT_EVALUATION_CONTEXT(), TransactionContext.NO_TRANSACTION);
                        LOGGER.log(Level.SEVERE, "rollback outcome trasaction tx=" + tx + " on tablespace " + tableSpace + ": " + result);
                    } catch (Throwable t) {
                        LOGGER.log(Level.SEVERE, "error while rolling back trasaction tx=" + tx + " on tablespace " + tableSpace + " :" + t, t);
                    }
                }
            }

            openTransactions.clear();
        }
        scanners.values().forEach(s -> s.close());
        scanners.clear();
    }

    ConnectionsInfo.ConnectionInfo toConnectionInfo() {
        return new ConnectionsInfo.ConnectionInfo(id + "", connectionTs, username, address);
    }

    @Override
    public String toString() {
        return "ServerSideConnectionPeer{" + "id=" + id + ", channel=" + channel + ", address=" + address + ", username=" + username + '}';
    }

}
