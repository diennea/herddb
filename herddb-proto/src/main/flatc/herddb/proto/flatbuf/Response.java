// automatically generated by the FlatBuffers compiler, do not modify

package herddb.proto.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Response extends Table {
  public static Response getRootAsResponse(ByteBuffer _bb) { return getRootAsResponse(_bb, new Response()); }
  public static Response getRootAsResponse(ByteBuffer _bb, Response obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Response __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public long replyMessageId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public byte token(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int tokenLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer tokenAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer tokenInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public long tx() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String error() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer errorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public String stackTrace() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stackTraceAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer stackTraceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public boolean notLeader() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean last() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String columnNames() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer columnNamesAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer columnNamesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public Row rows(int j) { return rows(new Row(), j); }
  public Row rows(Row obj, int j) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int rowsLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public byte data(int j) { int o = __offset(24); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int dataLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer dataAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer dataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  public Map newValue() { return newValue(new Map()); }
  public Map newValue(Map obj) { int o = __offset(26); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long updateCount() { int o = __offset(28); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public DMLResult batchResults(int j) { return batchResults(new DMLResult(), j); }
  public DMLResult batchResults(DMLResult obj, int j) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int batchResultsLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }

  public static int createResponse(FlatBufferBuilder builder,
      byte type,
      long replyMessageId,
      int tokenOffset,
      long tx,
      int errorOffset,
      int stackTraceOffset,
      boolean notLeader,
      boolean last,
      int columnNamesOffset,
      int rowsOffset,
      int dataOffset,
      int newValueOffset,
      long updateCount,
      int batchResultsOffset) {
    builder.startObject(14);
    Response.addUpdateCount(builder, updateCount);
    Response.addTx(builder, tx);
    Response.addReplyMessageId(builder, replyMessageId);
    Response.addBatchResults(builder, batchResultsOffset);
    Response.addNewValue(builder, newValueOffset);
    Response.addData(builder, dataOffset);
    Response.addRows(builder, rowsOffset);
    Response.addColumnNames(builder, columnNamesOffset);
    Response.addStackTrace(builder, stackTraceOffset);
    Response.addError(builder, errorOffset);
    Response.addToken(builder, tokenOffset);
    Response.addLast(builder, last);
    Response.addNotLeader(builder, notLeader);
    Response.addType(builder, type);
    return Response.endResponse(builder);
  }

  public static void startResponse(FlatBufferBuilder builder) { builder.startObject(14); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addReplyMessageId(FlatBufferBuilder builder, long replyMessageId) { builder.addLong(1, replyMessageId, 0L); }
  public static void addToken(FlatBufferBuilder builder, int tokenOffset) { builder.addOffset(2, tokenOffset, 0); }
  public static int createTokenVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startTokenVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTx(FlatBufferBuilder builder, long tx) { builder.addLong(3, tx, 0L); }
  public static void addError(FlatBufferBuilder builder, int errorOffset) { builder.addOffset(4, errorOffset, 0); }
  public static void addStackTrace(FlatBufferBuilder builder, int stackTraceOffset) { builder.addOffset(5, stackTraceOffset, 0); }
  public static void addNotLeader(FlatBufferBuilder builder, boolean notLeader) { builder.addBoolean(6, notLeader, false); }
  public static void addLast(FlatBufferBuilder builder, boolean last) { builder.addBoolean(7, last, false); }
  public static void addColumnNames(FlatBufferBuilder builder, int columnNamesOffset) { builder.addOffset(8, columnNamesOffset, 0); }
  public static void addRows(FlatBufferBuilder builder, int rowsOffset) { builder.addOffset(9, rowsOffset, 0); }
  public static int createRowsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRowsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(10, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addNewValue(FlatBufferBuilder builder, int newValueOffset) { builder.addOffset(11, newValueOffset, 0); }
  public static void addUpdateCount(FlatBufferBuilder builder, long updateCount) { builder.addLong(12, updateCount, 0L); }
  public static void addBatchResults(FlatBufferBuilder builder, int batchResultsOffset) { builder.addOffset(13, batchResultsOffset, 0); }
  public static int createBatchResultsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBatchResultsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

