// Licensed to Diennea S.r.l. under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. Diennea S.r.l. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
//  specific language governing permissions and limitations
//  under the License.


namespace herddb.proto.flatbuf;

enum MessageType : byte {    
    TYPE_ACK = 0,    
    TYPE_CLIENT_SHUTDOWN = 3,
    TYPE_ERROR = 4,
    TYPE_EXECUTE_STATEMENT = 5,
    TYPE_EXECUTE_STATEMENT_RESULT = 6,
    TYPE_OPENSCANNER = 7,
    TYPE_RESULTSET_CHUNK = 8,
    TYPE_CLOSESCANNER = 9,
    TYPE_FETCHSCANNERDATA = 10,
    TYPE_REQUEST_TABLESPACE_DUMP = 11,
    TYPE_TABLESPACE_DUMP_DATA = 12,
    TYPE_REQUEST_TABLE_RESTORE = 13,
    TYPE_PUSH_TABLE_DATA = 14,
    TYPE_EXECUTE_STATEMENTS = 15,
    TYPE_EXECUTE_STATEMENTS_RESULT = 16,
    TYPE_PUSH_TXLOGCHUNK = 17,
    TYPE_TABLE_RESTORE_FINISHED = 19,
    TYPE_PUSH_TRANSACTIONSBLOCK = 20,
    TYPE_RESTORE_FINISHED = 23,
    TYPE_TX_COMMAND = 24,
    TYPE_SASL_TOKEN_MESSAGE_REQUEST = 100,
    TYPE_SASL_TOKEN_SERVER_RESPONSE = 101,
    TYPE_SASL_TOKEN_MESSAGE_TOKEN = 102,

}


table KeyValue {
    key: [byte] (required);
    value: [byte] (required);
}

table IndexDefinition {
    schema: [byte];
}
table TableDefinition {
    schema: [byte];
}
table TxLogEntry {
    entry: [byte];
}

table IntValue {
    value: int;
}
table LongValue {
    value: long;
}
table TimestampValue {
    value: long;
}
table NullValue {
    value: long;
}
table StringValue {
    value: string;
}
table BooleanValue {
    value: bool;
}
table DoubleValue {
    value: long; // converted in Java
}
table DMLResult {
    updateCount: long;
    newValue: Map;
}

union AnyValue {IntValue, LongValue, StringValue, BooleanValue, DoubleValue, NullValue, TimestampValue}

table AnyValueWrapper {
    value: AnyValue (required);
}

table ColumnDefinition {
    name: [byte];
}

table Row {
    cells: [AnyValueWrapper];
}

table Map {
    entries: [MapEntry];
}

table MapEntry {
    key: string;
    value: AnyValueWrapper;
}

table AnyValueList  {
    items: [AnyValueWrapper];
}
